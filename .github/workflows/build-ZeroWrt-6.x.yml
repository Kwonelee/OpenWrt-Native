name: Build ZeroWrt 6.x

on:
  repository_dispatch:
  workflow_dispatch:
    # inputs:
      # ssh:
        # description: 'SSH connection to Actions'
        # required: false
        # default: 'false'
  # schedule:
   # - cron: 40 15 * * 3

env:
  REPO_URL: https://github.com/openwrt/openwrt
  CONFIG_FILE: .config
  DIY_DEVICE_SH: diy/00-prepare_add_device.sh
  DIY_BASE_SH: diy/00-prepare_base.sh
  DIY_PACKAGE_SH: diy/01-prepare_package.sh
  DIY_ROCKCHIP_SH: diy/02-rockchip_target_only.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        REPO_BRANCH:
          - v24.10.4
        ARCHITECTURE:
          - armv8
        os:
          - ubuntu-22.04

      fail-fast: false

    steps:
    - name: 合并磁盘
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: 准备完成
      uses: actions/checkout@main

    - name: 创建工作目录
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/workdir
        chmod 755 ${GITHUB_WORKSPACE}/workdir
        echo "WORKDIR=$PWD" >> $GITHUB_ENV

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/${{ matrix.os }})
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"

    - name: 克隆源码
      working-directory: ${{ env.WORKDIR }}/workdir
      run: |
        df -hT $PWD
        echo "开始克隆源代码仓库..."
        git -c advice.detachedHead=false clone --depth=1 --branch "${{ matrix.REPO_BRANCH }}" --single-branch --quiet $REPO_URL openwrt
        #git clone --depth=1 --quiet -b openwrt-24.10 https://github.com/immortalwrt/immortalwrt immortalwrt
        git clone --depth=1 --quiet -b openwrt-24.10 $REPO_URL openwrt_snap
        
        echo "正在克隆 OpenBox 仓库以支持后续编译"
        git clone --depth=1 -b main https://github.com/Kwonelee/OpenBox OpenBox
        
        echo "正在进行源代码处理..."
        find ${{ env.WORKDIR }}/workdir/openwrt/package/* -maxdepth 0 ! -name 'firmware' ! -name 'kernel' ! -name 'base-files' ! -name 'Makefile' -exec rm -rf {} +
        rm -rf ${{ env.WORKDIR }}/workdir/openwrt_snap/package/firmware ${{ env.WORKDIR }}/workdir/openwrt_snap/package/kernel ${{ env.WORKDIR }}/workdir/openwrt_snap/package/base-files ${{ env.WORKDIR }}/workdir/openwrt_snap/package/Makefile
        cp -rf ${{ env.WORKDIR }}/workdir/openwrt_snap/package/* ${{ env.WORKDIR }}/workdir/openwrt/package/
        
        #echo "为 Rockchip 架构替换 ImmortalWRT 组件以增强设备兼容性..."
        #rm -rf ${{ env.WORKDIR }}/workdir/openwrt/package/boot/{rkbin,uboot-rockchip,arm-trusted-firmware-rockchip}
        #rm -rf ${{ env.WORKDIR }}/workdir/openwrt/target/linux/rockchip
        #cp -rf ${{ env.WORKDIR }}/workdir/immortalwrt/target/linux/rockchip ${{ env.WORKDIR }}/workdir/openwrt/target/linux/rockchip
        #cp -rf ${{ env.WORKDIR }}/workdir/immortalwrt/package/boot/uboot-rockchip ${{ env.WORKDIR }}/workdir/openwrt/package/boot/uboot-rockchip
        #cp -rf ${{ env.WORKDIR }}/workdir/immortalwrt/package/boot/arm-trusted-firmware-rockchip ${{ env.WORKDIR }}/workdir/openwrt/package/boot/arm-trusted-firmware-rockchip
        
        echo "替换feeds.conf.default..."
        cp -rf ${{ env.WORKDIR }}/workdir/OpenBox/doc/feeds/feeds.conf.default ${{ env.WORKDIR }}/workdir/openwrt/feeds.conf.default
        
        echo "移除多余文件..."
        rm -rf ${{ env.WORKDIR }}/workdir/openwrt_snap
        #rm -rf ${{ env.WORKDIR }}/workdir/immortalwrt
        
        ln -sf ${{ env.WORKDIR }}/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存构建动作
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.os }}-${{ matrix.ARCHITECTURE }}-${{ matrix.REPO_BRANCH }}
        prefix: ${{ github.workspace }}/openwrt

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      env:
        CONFIG_FILE_PATH: ${{ matrix.ARCHITECTURE }}/${{ env.CONFIG_FILE }}
      run: |
        # [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE_PATH ] && mv $CONFIG_FILE_PATH openwrt/$CONFIG_FILE
        chmod +x diy/*.sh
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_DEVICE_SH
        $GITHUB_WORKSPACE/$DIY_BASE_SH
        $GITHUB_WORKSPACE/$DIY_PACKAGE_SH
        $GITHUB_WORKSPACE/$DIY_ROCKCHIP_SH

    # - name: SSH 连接到 Actions
      # uses: P3TERX/ssh2actions@main
      # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      # env:
        # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")-${{ matrix.ARCHITECTURE }}" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "
        🖥️ Architecture: rockchip-${{ matrix.ARCHITECTURE }}

        🔀 Branch: ${{ matrix.REPO_BRANCH }}

        📂 Source Code: ${{ env.REPO_URL }}

        🕒 Compilation Time: $(date +"%Y年%m月%d日%H时%M分") " >> release.txt
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.FIRMWARE }}/*station-m2-squashfs-sysupgrade.img.gz
          ${{ env.FIRMWARE }}/*tvi3315a-squashfs-sysupgrade.img.gz

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
